name: Deploy AWS Infrastructure

on:
  workflow_dispatch:

env:
  
  AWS_REGION : us-east-1

permissions:
      id-token: write  
      contents: read

jobs:
  AssumeRoleAndCallIdentity:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::087730237728:role/GitHubAction-AssumeRoleWithAction
          aws-region: ${{ env.AWS_REGION }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd infra
          terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: |
          cd infra
          terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          cd infra
          terraform plan -input=false -var zone_id=${{ secrets.TF_VAR_ZONE_ID }}

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: |
          cd infra
          terraform apply -auto-approve -input=false -var zone_id=${{ secrets.TF_VAR_ZONE_ID }}